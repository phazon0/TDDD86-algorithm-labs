
1) Identifiera de metoder dar variablerna ¨ eventQueue och allTheFish
anvands. Vilken funktion har de?

> Svar: EventQueue används i Simulation destructorn där den kontrolleras vara tom, i run metoden där events hämtas och exekveras till simulationTime når simulation_horizon. Eventqueue används även i scheduleevent i Simulation klassen där den tillåter resten av programmet att schemalägga nya events.

allTheFish variablen används i destructorn för Simulation där det kontrolleras att varje fisk inte är caugth samt deletar dem från heapen.I harvestTonnageNow metoden används den för att rensa alla döda fiskar ifrån heapen samt förflytta levande till stillAlive variablen. Här rensas även fiskar som fångas. Variablen används även i addFish som låter resten av programmet lägga till fiskar. 


2) Experimentera med olika värden för parametrarna "LANDING" och
  "MIN_CATCHABLE_AGE". Fiskbeståndet kollapsar när antalet fisk blir
  0.  Identifiera \textbf{ett} par "(LANDING, MIN_CATCHABLE_AGE)" där
  fiskbeståndet inte kollapsar, där "LANDING" är maximal (dvs.,
  fiskbeståndet kollapsar om man ökar "LANDING" med 10.000) eller där
  "MIN_CATCHABLE_AGE" är minimal (dvs., fiskbeståndet kollapsar om man
  sänker den med 50 dagar). På grund av randomisering kan du behöva
  köra simuleringen ett par gånger (2-3 gånger).  Påverkas
  hållbarheten av fiskbeståndet av "LANDING" eller av
  "MIN_CATCHABLE_AGE"? Ge en hypotes som är konsistent med dina
  experiment som förklarar relationen mellan produktionen ("LANDING")
  och storleken på näten ("MIN_CATCHABLE_AGE").

> Svar: Populationen var stabil på LANDING=900000 då MIN_CATCHABLE_AGE var 550 men crashade ofta på LANDING=100000. För LANDING=700000 var MIN_CATCHABLE_AGE=450 stabil men MIN_CATCHABLE_AGE=400 crashade ofta
våran slutsats är att landing är dominerande eftersom MIN_CATCHABLE_AGE inte påverkar om den går över MAX_AGE eller under MIN_KEPT_AGE medans LANDING alltid påverkar hur mycket fisk som fångas. 



3) Identifiera var Fish och Event objekten allokeras dynamiskt (med
  "new") och när motsvarande minnet befrias.  Minska
  "SIMULATION_HORIZON" till 1200 dagar, "LANDING" till 12000 och
  "STARVE_THRESHOLD" till 2000.  Använd Valgrind för att kolla upp om
  det finns minnesläckor.
  
  a. Upptäcker Valgrind några minnesläckor?

  > Svar: Nej



  b. Kan du skapa minnesläckor igenom att kommentera en rad i koden? I
  så fall vilken rad i vilken fil? Argumentera annars.

  > Svar: Kommentera ut en line med delete t.ex rad 61 i Event.cpp


4) Jämför effektivitet: Jämför skillnad i hur långt tid det
  tar att köra simuleringen med en "MyVector" där
  "push_back" har O(1) amorterade tids komplexitet,
  och en där "push_back" har O(N) amorterade tids
  komplexitet.  Se till att använda "MyVector" både i
  "MyPriorityQueue.h" och i "Simulation::harvestTonnageNow".
  (Se också till att göra en "clean all" och en "rebuild all"
  under "Build" i Qt Creator för att säkerställa att ändringar
  i header filer tas hänsyn till.) 

> Svar: När vi testade med för hög SIMULATION_HORIZON visade inte programmet tiden så vi tog SIMULATION_HORIZON=2000 då tog O(1) push_back mindre än 1 sekund och O(N) push_back tog 13 sekunder
Vi testade även med högre SIMULATION_HORIZON när vi mäte med timer på mobilen och då tog O(1) 1 sekund och O(N) 96sekunder


